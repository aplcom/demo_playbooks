---
- name: Install pip 
  apt: name=python-pip state=installed
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install the commandline tools for AWS
  pip: name=awscli state=present
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
 
#- name: Include the variables specific to the vpc
#  include_vars: envs/{{ environ }}.yml

- debug: var=environ
- debug: msg="vpc-{{ environ }}-{{ ec2_region }}"
 
- name: Create the VPC 
  ec2_vpc:
    state: present
    region: "{{ ec2_region }}"
    resource_tags:
        Name: "vpc-{{ environ }}-{{ ec2_region }}"
        environment: "{{ environ }}"
    #ec2_access_key: "{{ ec2_access_key }}"
    #ec2_secret_key: "{{ ec2_secret_key }}"
    region: "{{ ec2_region }}"
    cidr_block: "{{ vpc_cidr_block }}"
    subnets: "{{ vpc_subnets }}"
    dns_support: true
    dns_hostnames: true
    internet_gateway: "{{ vpc_internet_gateway|string }}"
    route_tables: "{{ vpc_route_tables_public }}"
    wait: true
  register: vpc

- name: Write out a temporary file for mapping subnet to id
  #template: src=templates/subnet_id.j2 dest=/tmp/subnet_id
  template: src=subnet_id.j2 dest=/tmp/subnet_id

- name: Get the contents of subnet mapping file and set it as a fact
  set_fact:
    subnet_maps: "{{ lookup('file', '/tmp/subnet_id') }}"
  register: subnet_id

- debug: var=subnet_id  

- name: Create the nat security group for the VPC
  local_action:
    module: ec2_group
    name: "{{ vpc_nat_sec_group.name }}"
    description: "{{ vpc_nat_sec_group.desc }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ ec2_region }}"
    #ec2_access_key: "{{ ec2_access_key }}"
    #ec2_secret_key: "{{ ec2_secret_key }}"
    rules: "{{ vpc_nat_sec_group.rules }}"
    rules_egress: "{{ vpc_nat_sec_group.rules_egress }}"
  when: environ != "management"
  register: public_nat_group

- debug: var=public_nat_group

- name: Tag the NAT security group
  local_action:
    module: ec2_tag
    resource: "{{ public_nat_group.group_id }}"
    region: "{{ ec2_region }}"
    state: present
    tags:
      Name: "{{ environ + '_vpc_nat_sec_group' }}"
      environment: "{{ environ }}"
      tier: "public"
  when: environ != "management"

- name: set fact
  debug: msg="{{ item.id }}"
  with_items: "{{ vpc.subnets }}"

- name: Create the NAT Instance
  ec2:
    assign_public_ip: true
    group_id: "{{ public_nat_group.group_id }}"
    region: "{{ ec2_region }}"
    #ec2_access_key: "{{ ec2_access_key }}"
    #ec2_secret_key: "{{ ec2_secret_key }}"
    keypair: "{{ ec2_keypair }}"
    instance_type: "{{ vpc_nat_instance_type }}"
    image: "{{ vpc_nat_instance_id }}"
    vpc_subnet_id: "{{ item.id }}"
    source_dest_check: false
    wait: true
    instance_tags: 
      Name: "{{ environ + '_nat_instance' }}"
      role: "nat"
      tier: "public"
    exact_count: 1
    count_tag: 
      Name: "{{ environ + '_nat_instance' }}"
  register: ec2
  with_items: "{{ vpc.subnets }}"
  when: vpc_internet_gateway and item['resource_tags']['tier'] is defined and item['resource_tags']['tier'] == 'public' and
        environ != "management"

- name: deployed nat instances
  debug: msg="{{ ec2 }}" 

- debug: var=aws_creds
 
- name: Get the routing table entry for the main table.
  shell: >
     aws ec2 describe-route-tables --filters "Name=vpc-id,Values={{ vpc.vpc_id }}" | grep -2 "{{ update_route_table_hack }}" | grep -m1 RouteTableId  | cut -d: -f2 | tr '\"' ' '
  register: main_rtb
  when: vpc.changed and vpc_internet_gateway and environ != "management"
  environment: aws_creds

- debug: var=main_rtb

- name: Set the fact for NAT Instance variable
  set_fact: nat_instance="{{ item.tagged_instances[0].id }}"
  with_items: "{{ ec2.results }}"
  when: item.tagged_instances is defined and environ != "management"

- name: Set the gateway to nat interface.
  shell: >
     aws ec2 create-route --route-table-id {{ main_rtb.stdout }} --destination-cidr-block 0.0.0.0/0 --instance-id  {{ nat_instance }}
  when: vpc.changed and vpc_internet_gateway and environ != "management"
  environment: aws_creds

- name: Create the security group for the VPC
  ec2_group:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ ec2_region }}"
    #ec2_access_key: "{{ ec2_access_key }}"
    #ec2_secret_key: "{{ ec2_secret_key }}"
    rules: "{{ item.rules }}"
  with_items: "{{ vpc_security_groups }}"
  register: security_groups_results

- debug: var=security_groups_results

- name: Tag the security group
  local_action:
    module: ec2_tag
    resource: "{{ item.group_id }}"
    region: "{{ ec2_region }}"
    state: present
    tags:
      #Name: "{{ environ + '_vpc_sec_group' }}"
      Name: "{{ item.item.name + '_vpc_sec_group' }}"
      environment: "{{ environ }}"
      #tier: "public"
      #az: "{{ vpc_subnets.az }}"
#     with_items: vpc_security_groups
  with_items: "{{ security_groups_results.results }}"

- name: get VPC id of destination VPC 
  command: "aws ec2 describe-vpcs --region {{ ec2_region }} --filter Name=tag:Name,Values=vpc-{{ environ }}-{{ ec2_region }}"
  register: get_vpc_id_dst
  changed_when: false
  when: provision_only_from_management == 'yes'

- name: set VPC info for destionation VPC
  set_fact: 
    set_vpc_json_dst: "{{ get_vpc_id_dst.stdout | from_json }}"
  changed_when: false
  register: vpc_dst
  when: provision_only_from_management == 'yes'

- name: get VPC id of source VPC
  command: "aws ec2 describe-vpcs --region {{ ec2_region }} --filter Name=tag:Name,Values=*management*"
  register: get_vpc_id_src
  changed_when: false
  when: provision_only_from_management == 'yes'

- name: set VPC info for source VPC
  set_fact:
    #set_vpc_json_src: "{{ get_vpc_id_src.stdout | from_json }}"
    set_vpc_json_src: "{{ get_vpc_id_src.stdout | from_json }}"
  changed_when: false
  register: vpc_src
  when: provision_only_from_management == 'yes'

 
- name: Check if only management VPC is created
  set_fact: 
    management_only: 1
  when: (provision_only_from_management == 'yes') and set_vpc_json_dst.Vpcs[0].VpcId == set_vpc_json_src.Vpcs[0].VpcId

- name: Create VPC peer links between management and other VPCs
  ec2_vpc_peer:
    name: "management-{{ environ }}-peer"
    #source_vpc: "{{ vpc.vpc | subnet_name_filter([management]) }}"
    #source_vpc: vpc-b679d6df
    #source_vpc: "{{ vpc.vpc | vpc_name_filter(vpc_filt) | list | join(', ')}}"
    #source_vpc: "{{ set_vpc_json_src.Vpcs[0].VpcId }}"
    vpc_id: "{{ set_vpc_json_src.Vpcs[0].VpcId }}"
    #peer_vpc: "{{ vpc.vpc | subnet_name_filter([stage]) }}"
    #peer_vpc: vpc-a662cccf
    #peer_vpc: "{{ vpc.vpc['id'] }}"
    peer_vpc_id: "{{ vpc.vpc['id'] }}"
    region: "{{ ec2_region }}"
    #peer_vpc: set_vpc_json_dst.Vpcs[0].Tags[0].Value
    state: present
    #update_routes: true
    region: "{{ ec2_region }}"
  register: vpc_peer_id
  when: (provision_only_from_management == 'yes') and (( vpc.changed and set_vpc_json_dst.Vpcs[0].VpcId is defined and set_vpc_json_src.Vpcs[0].VpcId is defined ) and management_only is not defined)

- name: Get the routing table entry for the main table. - peer1
  shell: >
    aws ec2 describe-route-tables --filters "Name=vpc-id,Values={{ vpc_peer_id.results[0].peer_vpc_id }}" | grep -2 "{{ update_route_table_hack }}" | grep -m1 RouteTableId  | cut -d: -f2 | tr '\"' ' ' | sed 's/ //g'
  register: main_rtb_peer_vpc
  when: ( vpc.changed and set_vpc_json_dst.Vpcs[0].VpcId is defined and set_vpc_json_src.Vpcs[0].VpcId is defined ) and management_only is not defined
  #when: vpc.changed and vpc_internet_gateway and environ != "management"
  environment: aws_creds

- debug: var=main_rtb_peer_vpc

- name: Get the routing table entry for the main table. - peer2
  shell: >
    aws ec2 describe-route-tables --filters "Name=vpc-id,Values={{ vpc_peer_id.results[0].source_vpc_id }}" | grep -2 false | grep -m1 RouteTableId  | cut -d: -f2 | tr '\"' ' ' | sed 's/ //g'
  register: main_rtb_source_vpc
  when: ( vpc.changed and set_vpc_json_dst.Vpcs[0].VpcId is defined and set_vpc_json_src.Vpcs[0].VpcId is defined ) and management_only is not defined
  #when: vpc.changed and vpc_internet_gateway and environ != "management"
  environment: aws_creds

- debug: var=main_rtb_source_vpc

- name: Set the route to neighbour VPC - peer
  shell: >
    aws ec2 create-route --route-table-id "{{ main_rtb_peer_vpc.stdout }}" --destination-cidr-block "{{ vpc_peer_id.results[0].source_vpc_cidr }}" --vpc-peering-connection-id  {{ vpc_peer_id.results[0].id }} || echo "route exists"
  when: ( vpc.changed and set_vpc_json_dst.Vpcs[0].VpcId is defined and set_vpc_json_src.Vpcs[0].VpcId is defined ) and management_only is not defined
  #when: vpc.changed and vpc_internet_gateway and environ != "management"
  environment: aws_creds
  register: debug_peer1

- debug: var=debug_peer1

- name: Set the route to neighbour VPC - peer
  shell: >
    aws ec2 create-route --route-table-id "{{ main_rtb_source_vpc.stdout }}" --destination-cidr-block "{{ vpc_peer_id.results[0].peer_vpc_cidr }}" --vpc-peering-connection-id  {{ vpc_peer_id.results[0].id }} || echo "route exists"
  #when: vpc.changed and set_vpc_json.Vpcs[0].VpcId is defined
  when: ( vpc.changed and set_vpc_json_dst.Vpcs[0].VpcId is defined and set_vpc_json_src.Vpcs[0].VpcId is defined ) and management_only is not defined
  #when: vpc.changed and vpc_internet_gateway and environ != "management"
  environment: aws_creds
  register: debug_peer2
  
- debug: var=debug_peer2

